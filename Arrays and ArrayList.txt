1. .length - gives the length of the array.
2. If we try to access an index in array that is not present in the array, then it will throw "IndexOutOfBound" Exception.
3. String[] a = {"aa","bb","cc","dd"}. This internally means, s is the reference variable that is stored in "stack" memory, and the araay object with size 4 will be stored in heap memory with references to the 4 actual string inside the array, which will be scattered stored in the heap memory. This will be the same for all the non - primitive datatypes(Integer(Object), String and Object). But in case of primitive data types(int,float,long etc.)., the array will contain the actual data itself in heap memory, bypassing the references.
4. Strings are immutable and arrays are mutable in java.
5. While declaring 2-D array, we must declare the row size but declaring column size is optional. Because, by declaring the row size, we are indirectly declaring the size of arrays the main array can store. But the size of the internal arrays in not mandatory to declare. The row and columns need not be of same size.
6. In 2D array, which is the array of arrays, the main array will have the indices of the arrays inside it. And the internal array storage act same as 1D array.
7. Arrys are of fixed size. We defenitely need to fix the size of array when declaring. But if i don't know the size taht has to be provided for the list, then we can use ArrayList.
8. In ArrysLiat we can ony define the Wrapper clases.=(Integer,String etc.). ArrayList<Integer> = new ArrayList(10);, here, the size 10, is just for fomality, but since we need not fix the size of arraylist, we can add more that 10 objects in it. It will not throw any error. It is a part of collection framework. While declaring the datatype for the arraylist, we cannot use primitive datatypes, we neded to use only Wrapper classes.
9. The memory behaviour of the arraylist is same as arrays.
10. Actually for arraylist the size given is fixed internally, 10(if the size is not given explicitly.), but when the ayyarlist fills it's size, then a new array will be created of size 1.5 times than the old array size. So, all the elements are copied to the new larger array. The reference to old array will be replaced with the new. But when the elemets are removed,I mean if the elemts are removed after expansion of the size of the array,  the size will not be shrinked automativcally, we need to explicitly do trimtosize().

