GIT AND GITHUB NOTES - 07-01-2024 - PAGE 4


1. If you want to work on some other people's repo, then first you need to fork it to your account (like copy), so that you can now access the repo from your account. This should be done because you cannot access the repo's of some other people's account.

2. After you create fork of someone else's repo, then if you make any changes to your local repo and you want those changes to be merged to the original user's repo, then you need to create a pull request. Make sure you are making changes by creating a new branch for every changes.
    git branch Veena - this is to create a branch names "Veena".
	git checkout Veena - this is to  change the pointer(HEAD) to branch "Veena", so from now on the commits we perform will be done on "Veena" branch.
	
3. If a branch is created and it is committed, then a pull request has to be created to merge that branch in main branch of original user's repo. If there is a pull request that is open and you change anything again to the branch and commit it, then even this change will go under same pull request. So, it is better to create a new branch for each change, if you commit a new branch, then a new pull request has to created for the new branch. So, follow one pull request (one commit) per branch. A new pull request can only be opened with a new branch. So, with multiple commits with no new branch, the commits will add on to the same pull request, which is difficult to inspect the changes, before merging.

4. Now, if you want to sync the original(OG) repo and fork repo then:
      1. First fetch all the changes of OG Repo : git fetch --all -prune 
      2. Next you need to checkout to the main branch of the fork repo.
      3. Next, you have to reset the fork repo's main branch to original repo's main branch, so that the both will be synced up.
	  

5. If you want to merge multiple commits into a single one(Squash), then execute git rebase -i ##hashcode of the commit which before the commits you want to merge.## . After this a list appears saying pick, retain the first one as pick and change the rest of the list with s(squash), now the commits with "s" will be merger with commit "pick". 	  


A small correction of last command(git push origin) in "Git and Github Notes - page 3", if you want to push your changes to your remote repo, then you need to tell the system which one is your upstream branch(default branch where your local repo pushes it's changes in remote repo). So the command will be "git push -u origin master", where master is the branch name(upstream).

HOW TO CREATE AND LINK SSH KEY TO GITHUB:
1. Open Git bash and check if you already have any ssh keys: ls ~/.ssh/id_rsa.pub - this is the location(C:\Users\saive\.ssh), where the ssh keys will be if present. If this returns error, then there are no SSH keys found.
2. If no SSH keys are found then we need to create one, so that we can clone any repo's from github using SSH: ssh-keygen -t rsa -b 4096 -C "saiveenakodimala@yahoo.com", wher ethe command expains, generate ssh key(ssh-keygen) of type rsa(Rivest Shamir Adleman, -t rsa), of bit length 4096(higher the better, -b 4096), with a comment(-C "saiveenakodimala@yahoo", for future reference).
3. Next we have to start the ssh agent, to add the ssh key - eval "$(ssh-agent -s)"
4. Further, add the private key to ssh agent: ssh-add ~/.ssh/id_rsa(make sure you are not adding public key: ssh-add ~/.ssh/id_rsa.pub). After adding the ssh key, we have to add the key to github, copy your public key and paste it in New SSH key craeted in github -> click user profile -> setting -> ssh and gpg keys -> add new ssh key. 
5. Test your added ssh key in git bash: ssh -T git@github.com
7. 