JAVA is a complete package of JDK(Java Development KIt) -> JRE(Java Runtime Environment) -> JVM(Java Virtual Machine) - > JIT(Just In Time Compiler).

So If I have craeted a .java file(my code), then below is the flow of how my .java code turns into my output expected:
   1. JDK contains Java compiler(javac), JRE. So the first step after creting a .java file, is to compile it. This is done by executing the command "javac Sample.java" in a CMD. Here, the compiler of   JDK will compile the java code and convert it into byte code(.class file). So this byte code is platform independent(independent of OS). So, a class file generated in windows system can be runned in a linux system.
   2. JRE actually provides an environment for running the java files. JVM, which is present inside JRE is responsible for running the byte code. If first loads the class file(Sample.class) into memory and loads necessary java libraries. And also it allocates memory for the variables inside the java code in the heap. Next it verifies if the class file is safe(without any error, if so, they are called runtime errors). It is also responsible for replacing teh actual values for the input variables, when the input(actual values) is provided. I contains stack and heap allocations.
   3. Now, the JIT compiles blocks of byte code, converts it into machine code and caches it, for better performance. 	   
   
1. If a java file name is "Sample.java", then the file contains "Sample" public class. the only public class that shoul be present in Sample.java.
2. Usually calss name should be starting with a capital letter.
3. A public class can be accessed from anywhere in any class,any file and any package.
4. public static void main(String[] args){
} is the main method of the java where the code starts from. here public means that the JVM executes the main method first outside the class, so it has to be accesible, so that is the reason "Main" method is public. static is a way of saying that the main method is dependent on any instance of teh class but the class itself. Since, main method is the start point even b4 anything, should be instance independent, that is the reason main method is static. void because the method does not return anything. String args[] is the para,eters for the main method, so that the JVM can pass the comman-line arguments to main method. Eg: "java Sample Hello Hi Bye"(java run command). Now args array contains Hello, Hi and Bye as array input.
5. System.ot.println, here the System class is the java's default class present in java.langh package that helps to deal with debugging , output etc.Syste.out is the dispaly of output and System.in is the input from keyboard.
6. Scanner calss helps to get the user defined output from the console. Eg:
Scanner sc = new Scanner(System.in);
int a = sc.nextInt();

Here if the input is string then String b = sc.next(). But we have to observe that, if in console if i type Hey How are you, then b contains only Hey, because it considers only sing string until the space. If we want the entire line then we have to go for String a = sc.netLine()
7. Datatypes in java: Primitive and Non-primitive.
8. Primitive: They are simple datatypes where it cannot be divided or break further.Eg: nuber 4 or character a etc. Integer(4 bytes), Character,float(4 bytes),double(8 bytes),long(8 bytes),boolean.
int a =10;
float f = 1.1f;
char a = "k";
double d = 4567.09998
long l = 1098787987987L;
boolean b = false;

Ok, nowhy do we add f and L at the end of floaat and long? actually the equivalent datatypes of long and float are int and double. The difference is Long accepts larger number(in terms of size 8 bytes) and float has leseer precision. So,
Eg1: float 1.1; -> for java, this 1.1 is by default double. So if we compile this, it will throw a compilation error saying lousy conversion. so we need to tell java explicitly that 1.1 is a float despite of declaring it as a float, as 'f'. Eg2: long b = 0989789789787; For java 0989789789787 is int by default so when we compile it it throws an error saying too large number since integer can only store 4 bytes. so we need to tell java explicitly that 0989789789787 is a long despite of declaring it as a long, as 'L'.

8. Automatic Type casting in java without being done explicitly will work under certain conditions. Eg: Assigning an integer to a float. float a = 4; This will work because float and integer are compatabile and also, we are assigning a comparitively small datatype(int) to float, but this will not work the other way around. If we want t o assign a float to integer the we need to do type casting explicitly. Eg: int a = (int) 45.2;

Eg1:
int a=345;
byte b = (byte) a;

Now b will store 89. why? - a byte can store atmost 256 bits so the value that is greater than 256 will be divided by 256 and the remainder will be stored in a byte variable, if a larger number is assigned. This only happen if the type casting is done. In normal, you cannot do byte b = 456; this will give type mismatch error, since 456 is considered as int.

Eg2:
byte a = 9;
byte c=5;
byte c=a*b; -> this will throw type mismatch error.
Why? - This is because when complex function are involved(+,-,*,/) between two bytes, the the result will be casted automatically to int. So the result cannot be stored in a byte variable.

9. Java works on UNICODE values, meaning it supports all the languages.
10. In java, when two different data types are packed with an operator, the the result of the operation will in the dtatype that superior of the both datatypes. Eg: int,float = float. int,long=long. Thease are known as type promotion rules of java.

10. There is no pass by reference in java, there is only pass by value. In functions, we pass parameters, by this we will be passing the copy of value present in heap memory, of the refence variable. so when the value is received in the function by the arguments, they point to the same object(value) present in heap. If the value of the argument is changed in the function, then the reference variable(parameter) will point to the new value. So, this will not change the original value(parameter values).  The above mentionesd is  applicable only to primitive datatypes(int,float,long,double,short,byte) and Non-primitive Datatype-String alone. They are immutable. When dealing with arrays, they are mutable so when a value is changed, then it will affect the original value, even inside a function to which the array has been passes ad argument.

9. We cannot use object dependent entities(non static variable) inside a object independent blocks(static metods etc.)

11. Shodowing:: This is a concept, where when a child class has the same variable that has been declared in Parent clss(inherited by child), then the variable in child will override the parent's variable. This happens if a variable is declared globally in a class and there is method inside the class with the same variable name as the global variable, then inside the method, the variable inside the method will shaodow the global variable. But, this is not similar to polymorphism(method overriding) since polymorphism applies to methods and shadowing applies to variables.

EXAMPLE::	 
class Parent {
    int x = 10;
}

class Child extends Parent {
    int x = 20; // Shadows Parent's x
}

public class Main {
    public static void main(String[] args) {
        Parent obj1 = new Parent();
        System.out.println(obj1.x); // Prints 10 (Parent's x) -> Shadowing happens, child's x is completely shadowed by parent x.

        Child obj2 = new Child();
        System.out.println(obj2.x); // Prints 20 (Child's x) 

        Parent obj3 = new Child(); // Upcasting
        System.out.println(obj3.x); // Prints 10 (Parent's x) 
		
		Child obj4 = (Child)obj3; // Downcasting 
        System.out.println(obj4.x); // Prints 20 (Child's x)  -> Shadowing happens, parent's x is completely shadowed by child x
    }
}




10. Parent obj = new Child();
In the above stmt, "Parent" is the reference type and "Child" is the object type that is actually stored in memory. Reference type will decide membors(variables/methods) that can be accessed at comiple time. Object type will deciede whose method to be overriden at runtime. This is known as upcasting i.e, assigning child object to parent's refrence. left side of == is refrence and right side of = is ojeco.

EXAMPLE::::

class Parent {
    int x = 10;

    void show() {
        System.out.println("Parent show()");
    }
}

class Child extends Parent {
    int x = 20; // Shadowing Parent's x

    @Override
    void show() {
        System.out.println("Child show()");
    }

    void childOnlyMethod() {
        System.out.println("Child-specific method");
    }
}

public class Main {
    public static void main(String[] args) {
        Parent obj = new Child(); // Reference Type: Parent, Object Type: Child

        System.out.println(obj.x); // Prints 10 (Reference Type determines variable access, here child's x is shadowed by parent's x.)
        obj.show(); // Prints "Child show()" (Object Type determines overridden method execution)

        // obj.childOnlyMethod(); // ❌ ERROR: Cannot access child-specific method using Parent reference

        // Downcasting to access Child-specific members
        Child childObj = (Child) obj;
        childObj.childOnlyMethod(); // ✅ Works now
    }
}

In the above method, during compile time, since the Reference type of object(obj) is Parent, Parent's x and show method is accesible and there was no compilation error, if line "obj.childOnlyMethod();" was uncommented, then it is an error, since the reference type is of Parent, Child's methods are not accesible. In Runtime, since the object type is Child, the show method of parent id overriden by child's method. 

Late Binding::: Also known as dynamic method dispatch or runtime polymorphism, is decising which method to run at runtime based on object type rather than reference type. It is applicable only for methods and not variables.

Variable access is decieded by reference type and method's loading is decieded by object type.

Difference between Shadowing and polymorphism:::

   a. Shadowing affects variable while polymorphism affects methods.
   b. Shadowing is Resolved at compile-time while polymorphism is resolved at runtime.
   c. Shadowing depends on reference type while polymorphism depends on object type.
   d. Shadowing does not works with upcasting because, at compile time for Parent obj = new Child() ==> this is upcasting, here, the rference type is Parent so parent's variables are only accessed. Since late-binding is not available for variables, only the paren's variables and methods are accessed via obj. So, shadowing is not supported. But, polymorphism works with upcasting, because in this Parent obj = new Chld(), at runtime, due to late-binding, child's method will be eexecuted since it is dependent only onbjec type and not reference type.

Method Overloading: In a class file, if two or more functions have same name, but different types of arguments or different no.of arguments, then in compile time, the compiler will decide which method to run based on the arguments.

Variable length arguments(varargs): For a method, if we do not know how many arguments you want to pass as arguments, then we can do like Summ(int ...v). Here "v" will have an array of integers. Referece code(JavaBasics) for example. When we are trying to pass varargs and string , int, alltogether, then the varargs should always be at the end. Vraargs will also work if the function call sends 0 params. In method overloasding, if there two function with same name and int varargs and string varargs respectively(fun(String ...v) and fun(int ...x)), then if we call fun(), it will show an error, due to ambiguity. because, the both functions are applicable if the params are empty.so, the compiler will not be able to decide. 		

Declaration of variables will happen at runtime and the object creation memory heap happens in runtime(Dynamic memory allocation).

In java, the array elements getting stored continuosly in heap memory depends on the JVM.Since the array objects are stored in heap, In JLS(Java Language Specification), they mentioned the heap objects are not continuous.

"new" keyword in instance creation is used to create a new object oin the heap memory. Eg int[] a = new int[5], the new keyword indicated to create an array apace of 5 in heap. The default values of this array is [0,0,0,0,0]. For string it will be "null".

Primitives are stored in the stack memory and objects and primitive dtataypes are stored in heap memory.






   


   